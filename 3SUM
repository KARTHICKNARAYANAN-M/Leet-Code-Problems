3SUM

PROBLEM STATEMENT :

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

SAMPLE INPUT|OUTPUT :

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.


SOLUTION.JAVA:

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
       
       Arrays.sort(nums);
        List<List<Integer>>a=new ArrayList<>();
        HashSet<List<Integer>>s=new HashSet<>();
        int i=0;
        while(i<nums.length-1)
        {
            int j=i+1,k=nums.length-1;
            while(j<k)
            {
                if(nums[i]+nums[j]+nums[k]==0&i!=j&&j!=k)
                {
                    ArrayList<Integer>b=new ArrayList<>();
                    b.add(nums[i]);
                    b.add(nums[j]);
                    b.add(nums[k]);
                    //System.out.println(nums[i]+" "+nums[j]+" "+nums[k]);
                    s.add(b);
                    j++;
                    k--;
                }
                if(nums[i]+nums[j]+nums[k]>0)
                {
                  k--;

                }
                if(nums[i]+nums[j]+nums[k]<0)
                    j++;
            }
            i++;
        }

     for(List l:s)
        a.add(l);
      return a;
           
    }
}

