Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

SOLUTION.JAVA:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* deleteDuplicates(struct ListNode* head){

    struct ListNode* temp=head;
    int x=0;
    struct ListNode* prev=temp;
    if(head==NULL)
      return head;
    temp=temp->next;
    while(temp!=NULL){
        if(temp->val==prev->val){
            prev->next=temp->next;
        }
        else
          prev=temp;
        temp=temp->next;

    }
        
    return head;

}
